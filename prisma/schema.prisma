// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        String  @id @default(cuid())
  name      String  @unique @db.VarChar(150)
  slug      String  @unique
  price     Int
  imageUrl  String
  stock     Int
  size      String? @db.VarChar(20)
  sku       String? @db.VarChar(20)
  overview  String? @db.Text
  materials String? @db.Text

  category   Category?         @relation(fields: [categoryId], references: [id])
  categoryId String?
  carts      ProductsOnCarts[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(100)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  username String    @unique
  password Password?
  fullName String?   @db.VarChar(50)
  address  String?   @db.Text
  phone    String?   @db.VarChar(14)

  cart       Cart?
  orders     Order[]
  passwordId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id String @id @default(cuid())

  hash String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Cart {
  id       String @id @default(cuid())
  subTotal Int

  user     User              @relation(fields: [userId], references: [id])
  userId   String            @unique
  products ProductsOnCarts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductsOnCarts {
  quantity Int

  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([cartId, productId])
}

model Order {
  id            String @id @default(cuid())
  orderTotal    Int
  address       String @db.Text
  paymentMethod String
  orderStatus   String

  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  quantity Int

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([orderId, productId])
}
